import TelegramBot from 'node-telegram-bot-api';
import { webAppUrl } from '../..';
import { bot } from '../..';
import {
  SM_requestUserAudio,
  SM_requestUserPhoto,
  SM_sendPaymentMessage,
  SM_userAcceptOrder,
  SM_userDeclineOrder,
} from './sendingMesagesFuncs';
import { createOrFindExistUserService } from '../services/userService';
import { UT_sendKeyboardMessage } from '../utils';

// Function to handle the /start command
export function EH_handleStartCommand(msg: TelegramBot.Message) {
  bot.removeListener('contact', EH_contactHandler);

  const chatId = msg.chat.id;

  const startMessage =
    '–í–∞—Å –≤—ñ—Ç–∞—î —á–∞—Ç-–±–æ—Ç Snakicz üêü\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É üëáüèª\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ [—Ç–µ–ª–µ–≥—Ä–∞–º](https://t.me/snakicz_manager) –∞–±–æ [—ñ–Ω—Å—Ç–∞–≥—Ä–∞–º](https://www.instagram.com/snakicz/)';
  const contactKeyboard = [[{ text: '–ú—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact: true }], ['–í–∏–π—Ç–∏']];

  UT_sendKeyboardMessage(bot, chatId, startMessage, contactKeyboard);

  bot.once('contact', EH_contactHandler);
}

export async function EH_contactHandler(msg: TelegramBot.Message) {
  const chatId = msg.chat.id;
  // Generate a random number between 1000 and 9999
  const phoneNumber = msg?.contact?.phone_number!;
  const updatedKeyboard = [['–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É']];

  await createOrFindExistUserService({ uniqueId: chatId.toString(), phoneNumber }).then((user) => {
    const isFirstTimeBuy = user && user.ordersCount > 1;

    const webUrl = isFirstTimeBuy ? webAppUrl + '/priceSelect' : webAppUrl;
    const thankYouMessage = "–î—è–∫—É—î–º–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ú–∞–≥–∞–∑–∏–Ω'";
    const repeatMessage = "–©–æ–± –≤–∏—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä —â–µ —Ä–∞–∑,–Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É'";

    UT_sendKeyboardMessage(bot, chatId, repeatMessage, updatedKeyboard);

    if (isFirstTimeBuy) {
      bot.sendMessage(chatId, thankYouMessage, {
        reply_markup: {
          inline_keyboard: [[{ text: '–ú–∞–≥–∞–∑–∏–Ω', web_app: { url: webUrl } }]],
        },
      });
    } else {
      bot.sendMessage(chatId, '–ß–∏ –±–∞–∂–∞—î—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?', {
        reply_markup: {
          inline_keyboard: [
            [{ text: '–ù—ñ', web_app: { url: webUrl } }],
            [{ text: '–¢–∞–∫', web_app: { url: webAppUrl + '/prevOrders' } }],
          ],
        },
      });
    }
  });
}

export async function EH_onCallbackQuery(
  callbackQuery: TelegramBot.CallbackQuery,
  group_id: string
) {
  const action = JSON.parse(callbackQuery.data!);
  const text = callbackQuery?.message?.text!;
  const chatId = callbackQuery?.message?.chat.id!;
  const messageId = callbackQuery?.message?.message_id!;

  let orderNumberFromText;
  const orderNumberMatch = text?.match(/–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\s+(\d+)/);

  if (orderNumberMatch && orderNumberMatch[1]) {
    // Extracted order number
    orderNumberFromText = orderNumberMatch[1];
    console.log(`Order Number: ${orderNumberFromText}`);
  } else {
    console.log('Order number not found in the text.');
  }

  switch (action.confirm) {
    case 'ukr-bank':
      SM_sendPaymentMessage(chatId!, action.confirm);
      break;
    case 'polish_bank':
      SM_sendPaymentMessage(chatId!, action.confirm);
      break;
    case 'sendPhoto':
      SM_requestUserPhoto(chatId!);
      break;
    case 'sendAudio':
      SM_requestUserAudio(chatId);
    case 'accept':
      SM_userAcceptOrder({
        bot,
        chatId,
        group_id,
        messageId,
        orderNumber: orderNumberFromText!,
      });
      break;
    case 'decline':
      SM_userDeclineOrder({
        bot,
        chatId,
        group_id,
        messageId,
        orderNumber: orderNumberFromText!,
      });
      break;
  }
}
