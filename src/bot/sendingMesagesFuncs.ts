import TelegramBot from 'node-telegram-bot-api';
import { group_chat, group_chat_for_payment } from '../..';
import { bot } from '../..';
import { getLastDataService } from '../services/orderService';

interface SendingMessageTypes {
  chatId: number;
  userId: number;
  messageId?: string;
  messages?: string[];
}

type SendingMessageTypeWithOrderNuymber = SendingMessageTypes & { orderNumber: string };

export function SM_confrimOrder({ chatId, userId }: SendingMessageTypes) {
  const paymentButtons: TelegramBot.EditMessageTextOptions = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ê-–±–∞–Ω–∫ (–∫—É—Ä—Å 9)',
            callback_data: JSON.stringify({ confirm: 'ukr-bank', chat_id: chatId }),
          },
        ],
        [
          {
            text: '–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –ø–æ–ª—å—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫',
            callback_data: JSON.stringify({ confirm: 'polish_bank', chat_id: chatId }),
          },
        ],
      ],
    },
  };

  bot.sendMessage(
    userId,
    '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ \n \n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ',
    paymentButtons
  );
}

export function SM_sendPaymentMessage(chatId: number, type: string) {
  function checkType(type: string) {
    switch (type) {
      case 'ukr-bank':
        return '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: 4323357029261688\n–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: –î–µ–º–µ–º–µ–Ω—Ç—å—î–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è\n–ö—É—Ä—Å: 9\n–°—É–º–∞: —Å—É–º–∞ –≤ –∑–ª–æ—Ç–∏—Ö –ø–æ–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ 9';
      case 'polish_bank':
        return '–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É:\n18160014621731022840000001\nO—Ç—Ä–∏–º—É–≤–∞—á: Snakicz\n–ë–∞–Ω–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: BNP Paribas Tytu≈Ç: oplata zam√≥wienia';
    }
  }

  bot.sendMessage(chatId, `${checkType(type)}`, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ c–∫—Ä—ñ–Ω-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
            callback_data: JSON.stringify({ confirm: 'sendPhoto', chat_id: chatId }),
          },
        ],
      ],
    },
  });
}

export function SM_requestUserPhoto(chat_id: number) {
  bot.sendMessage(chat_id, '–í–∏—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏,–ø—Ä–∏–∫—Ä—ñ–ø–∏–≤—à–∏ —Ñ–æ—Ç–æ –∑–Ω–∏–∑—É üëá');
  // Listen for messages from the user
  bot.once('photo', async (msg) => {
    const chatId = msg.chat.id;
    const orderNumber = await getLastDataService(chatId.toString()).then(
      (order) => order?.orderNumber
    );

    if (msg.photo && msg.photo.length > 0) {
      // The `msg.photo` property is an array of photo sizes
      // You can access different sizes using indexes (0 - smallest, 2 - largest)
      const photo = msg.photo[msg.photo.length - 1];
      try {
        // Send the photo to the group chat

        await bot.sendPhoto(group_chat_for_payment, photo.file_id);
        bot.sendMessage(group_chat_for_payment, `–°–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Ññ${orderNumber}`);
        bot.sendMessage(chatId, '–§–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ üòç\n–ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É');
      } catch (error) {
        console.error('Error sending photo:', error);
        bot.sendMessage(chatId, '–ü—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ üò≥\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É');
        SM_requestUserPhoto(chatId);
      }
    } else {
      bot.sendMessage(chatId, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏');
      SM_requestUserPhoto(chatId);
    }
  });
}

export function SM_paymentConfirm({ userId }: SendingMessageTypes) {
  bot.sendMessage(userId, '–í–∞—à—É –æ–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ‚úÖ\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è üì¶');
}

export function SM_userDeclineOrder({
  chatId,
  group_id,
  messageId,
  orderNumber,
}: {
  bot: TelegramBot;
  chatId: number;
  group_id: string;
  messageId_group: number;
  messageId: number;
  orderNumber: string;
}) {
  bot.editMessageText('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∞–Ω–Ω—É–ª—å–æ–≤–∞–Ω–µ!', {
    chat_id: chatId,
    message_id: messageId,
  });

  bot.sendMessage(group_id, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumber} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`);
}

export function SM_userAcceptOrder(bot: TelegramBot, groupId: string, orderNumber: string) {
  bot.sendMessage(groupId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumber} –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ`);
}

export function SM_actualizeInfo({
  messageId,
  userId,
  orderNumber,
}: SendingMessageTypeWithOrderNuymber) {
  const inlineKeyboardUser: TelegramBot.SendMessageOptions = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–¢–∞–∫',
            callback_data: JSON.stringify({ confirm: 'accept', message_id: messageId }),
          },
        ],
        [
          {
            text: '–ù—ñ',
            callback_data: JSON.stringify({ confirm: 'decline', message_id: messageId }),
          },
        ],
      ],
    },
  };

  bot.sendMessage(
    userId,
    `–ß–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ( –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderNumber} ) —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ?`,
    inlineKeyboardUser
  );
}

export function SM_sendOrderConfirmation({
  userId,
  orderNumber,
  messages,
}: SendingMessageTypeWithOrderNuymber) {
  bot.sendMessage(
    userId,
    `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ ${orderNumber} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É–∂–±–æ—é ${messages![0]} ,\n –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${
      messages![1]
    }üì¶`
  );
}
