const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');

dotenv.config();

// Constants
const _token = process.env.TOKEN;
const group_chat = process.env.GROUP_CHAT;
const group_chat_for_payment = process.env.GROUP_CHAT_FOR_PAYMENT;
const webAppUrl = process.env.WEB_URL;

let orderNumber;
let userPhoneNumber = '';

// Create Express app
const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// Create Telegram Bot
const bot = new TelegramBot(_token, { polling: true });

bot.on('polling_error', console.log);
// Helper function to send a message with a keyboard
function sendKeyboardMessage(chatId, text, keyboard) {
  const options = {
    parse_mode: 'Markdown',
    reply_markup: {
      one_time_keyboard: true,
      keyboard,
    },
  };
  bot.sendMessage(chatId, text, options);
}

function confrimOrder({ chatId, userId, text, messageId, keyboards }) {
  // Create a new array with the first element replaced
  const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
  updatedKeyboards[0] = [
    {
      text: '–ü—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω–æ!!!',
      callback_data: 'payment_confirmation',
    },
  ];

  const inlineKeyboard = [...updatedKeyboards];

  const paymentButtons = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ (–∫—É—Ä—Å 8.5)',
            callback_data: JSON.stringify({ confirm: 'privat', chat_id: chatId }),
          },
        ],
        [
          {
            text: '–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –ø–æ–ª—å—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫',
            callback_data: JSON.stringify({ confirm: 'polish_bank', chat_id: chatId }),
          },
        ],
        [
          {
            text: '–ü–µ—Ä–µ–∫–∞–∑ BLIK –∑–∞ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É',
            callback_data: JSON.stringify({ confirm: 'blik', chat_id: chatId }),
          },
        ],
      ],
    },
  };

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  });

  bot.sendMessage(
    userId,
    '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ \n \n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ',
    paymentButtons
  );
}

function sendPaymentMessage(chatid, type) {
  function checkType() {
    switch (type) {
      case 'privat':
        return '–í–∏ –æ–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –ü—Ä–∏–≤–∞—Ç –±–∞–Ω–∫. –û—Å—å –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è';
      case 'polish_bank':
        return '–í–∏ –æ–±—Ä–∞–ª–∏ —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –Ω–∞ –ø–æ–ª—å—Å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫. –û—Å—å –Ω–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É –¥–ª—è –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è';
      case 'blik':
        return '–í–∏ –æ–±—Ä–∞–ª–∏ —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏ —á–µ—Ä–µ–∑ Blik. –û—Å—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É, –∑–∞ —è–∫–∏–º –≤–∏ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –≥—Ä–æ—à—ñ';
    }
  }

  bot
    .sendMessage(chatid, `${checkType(type)}. –í–∏—à–ª—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Ñ–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏`)
    .then(() => {
      // Listen for messages from the user
      bot.once('message', async (msg) => {
        const chatId = msg.chat.id;

        if (msg.photo && msg.photo.length > 0) {
          // The `msg.photo` property is an array of photo sizes
          // You can access different sizes using indexes (0 - smallest, 2 - largest)
          const photo = msg.photo[2]; // Use the largest available photo
          console.log(msg.photo);
          console.log(photo);

          try {
            // Send the photo to the group chat
            await bot.sendPhoto(group_chat_for_payment, photo.file_id);
            bot.sendMessage(group_chat_for_payment, `–°–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Ññ${orderNumber}`);
            bot.sendMessage(
              chatId,
              '–§–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ üòç\n–ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É'
            );
          } catch (error) {
            console.error('Error sending photo:', error);
            bot.sendMessage(
              chatId,
              '–ü—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ üò≥\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É'
            );
            sendPaymentMessage(chatid, type);
          }
        } else {
          bot.sendMessage(chatId, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏');
          sendPaymentMessage(chatid, type);
        }
      });
    })
    .catch((error) => {
      console.error('Error sending payment message:', error);
    });
}

function paymentConfirm({ chatId, userId, text, messageId, keyboards }) {
  // Create a new array with the first element replaced
  const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
  updatedKeyboards[1] = [
    {
      text: '–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!!!',
      callback_data: 'payment_confirmation',
    },
  ];

  const inlineKeyboard = [...updatedKeyboards];

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  });

  bot.sendMessage(userId, '–í–∞—à—É –æ–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ‚úÖ\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è üì¶');
}

function sendOrderConfirmation({ chatId, userId, text, messageId, keyboards, orderNumber }) {
  // Create a new array with the first element replaced
  const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
  updatedKeyboards[2] = [
    {
      text: '–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!!!',
      callback_data: 'payment_confirmation',
    },
  ];
  const inlineKeyboard = [...updatedKeyboards];

  bot.sendMessage(
    group_chat,
    `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—Å–∏–ª–∫–∏ ‚Ññ ${orderNumber}  —á–µ—Ä–µ–∑ SPACE: 1) —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ 2) –Ω–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏`
  );
  bot.once('message', async (msg) => {
    const textFromMsg = msg?.text;
    try {
      const messages = textFromMsg.split(' ');

      bot.sendMessage(
        userId,
        `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ ${orderNumber} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É–∂–±–æ—é ${messages[0]} ,\n –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${messages[1]}üì¶`
      );

      bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
      });
    } catch (err) {
      console.log(err);
    }
  });
}

// Function to handle the /start command
function handleStartCommand(msg) {
  bot.removeAllListeners();

  const chatId = msg.chat.id;
  const user = msg.chat.username;

  // Generate a random number between 1000 and 9999
  const randomPart = Math.floor(Math.random() * 9000) + 1000;

  const option = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—è',
            callback_data: JSON.stringify({ confirm: 'confirm', chat_id: chatId }),
          },
        ],
        [
          {
            text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É',
            callback_data: JSON.stringify({ confirm: 'pay-confirm', chat_id: chatId }),
          },
        ],
        [
          {
            text: '–í–∏—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä –ø–∞—á–∫–∏',
            callback_data: JSON.stringify({ confirm: 'send-pack-number', chat_id: chatId }),
          },
        ],
      ],
    },
  };

  const inlineKeyboard = [
    [
      {
        text: '–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É',
      },
    ],
  ];

  const startMessage =
    '–í–∞—Å –≤—ñ—Ç–∞—î —á–∞—Ç-–±–æ—Ç Snakicz üêü\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É üëáüèª\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ [—Ç–µ–ª–µ–≥—Ä–∞–º](https://t.me/snakicz_manager) –∞–±–æ [—ñ–Ω—Å—Ç–∞–≥—Ä–∞–º](https://www.instagram.com/snakicz/)';
  const contactKeyboard = [[{ text: '–ú—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact: true }], ['–í–∏–π—Ç–∏']];

  sendKeyboardMessage(chatId, startMessage, contactKeyboard);

  function contactHandler(msg) {
    const chatId = msg.chat.id;
    console.log(msg.contact.phone_number);

    userPhoneNumber = msg.contact.phone_number;
    // Combine chatId and the random number to create the order number
    orderNumber = `${chatId}${randomPart}`;

    const storeKeyboard = [
      [{ text: '–ú–∞–≥–∞–∑–∏–Ω', web_app: { url: webAppUrl } }],
      [{ text: "–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –Ω–∞–º–∏" }],
    ];
    const thankYouMessage =
      "–î—è–∫—É—î–º–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ú–∞–≥–∞–∑–∏–Ω' –∞–±–æ '–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –Ω–∞–º–∏'.";
    sendKeyboardMessage(chatId, thankYouMessage, storeKeyboard);
  }

  function webDataHandler(msg) {
    if (msg.web_app_data?.data) {
      sendKeyboardMessage(chatId, '–î–∞–Ω—ñ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', inlineKeyboard);

      try {
        const dataFromResponse = JSON.parse(msg.web_app_data.data);
        const { data, products, totalPrice, totalWeight, freeDelivery, isCatExist } =
          dataFromResponse;

        // Functions to format messages
        function formatProduct(count, title, weight) {
          return `–Ω–∞–∑–≤–∞: ${title} –≤–∞–≥–∞: ${weight} –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${count},\n`;
        }

        async function sendProducts() {
          const prodMessage = `
        –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ: ${data?.userName} ${data?.userLastName}
        –ê–¥—Ä–µ—Å–∞-–ü–∞—á–∫–æ–º–∞—Ç—É: ${data?.addressPack || '–Ω–µ–º–∞'},
        –ê–¥—Ä–µ—Å–∞-–ø–æ–∫—É–ø—Ü—è: ${data?.userAddress || '–Ω–µ–º–∞'},
        –ù—ñ–∫: @${user},
        –Ñ –∫–æ—Ç–∏–∫: ${isCatExist ? '–Ñ –∫–æ—Ç–∏–∫' : '–ù–µ–º–∞ –∫–æ—Ç–∏–∫–∞'} 
        –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderNumber}
        –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞: ${freeDelivery ? '–Ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞' : '–ù–µ–º–∞'}
        C—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalPrice},
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${data?.phoneNumber},
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É: ${userPhoneNumber}
        –ï–º–µ–π–ª: ${data?.email},
        –í–∞–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalWeight},
        –ü–æ–∑–∏—Ü—ñ—ó: \n\n${products
          .map((item) => formatProduct(item.count, item.title, item.weight))
          .join('\n\n')}`;

          await bot.sendMessage(group_chat, prodMessage, option);
        }

        async function sendMessages() {
          const messagesToSend = [
            "–î—è–∫—É—é –∑–∞ –∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫",
            `–í–∞—à–∞ –≤—É–ª–∏—Ü—è: ${data?.userAddress || data?.addressPack}`,
            `C—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalPrice} z≈Ç`,
            `–í–∞–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalWeight} –≥—Ä–∞–º`,
          ];

          for (const message of messagesToSend) {
            await bot.sendMessage(chatId, message);
          }

          setTimeout(async () => {
            await bot.sendMessage(
              chatId,
              '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ù§Ô∏è\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è - –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É —Ç–µ–ª–µ–≥—Ä–∞–º (–ª—ñ–Ω–∫) –∞–±–æ —ñ–Ω—Å—Ç–∞–≥—Ä–∞–º (–ª—ñ–Ω–∫)'
            );
          }, 2000);
        }

        sendMessages();
        sendProducts();
        console.log(data);
      } catch (e) {
        console.error('Error parsing data:', e);
      }
    }
  }

  function messageHandlerFromText(msg) {
    if (msg.text === '–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É' || msg.text === '–í–∏–π—Ç–∏') {
      handleStartCommand(msg);
    }
    if (msg.text === "–ó–≤'—è–∑–∞—Ç–∏—Å—å –∑ –Ω–∞–º–∏") {
      bot.sendMessage(msg.chat.id, 'https://t.me/snakicz_manager');
    }
  }

  bot.once('contact', contactHandler);

  bot.once('web_app_data', webDataHandler);

  bot.on('message', messageHandlerFromText);

  bot.on('callback_query', function onCallbackQuery(callbackQuery) {
    const action = JSON.parse(callbackQuery.data);
    const text = callbackQuery.message.text;
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const keyboards = callbackQuery.message.reply_markup.inline_keyboard;
    const userId = action?.chat_id;
    let orderNumberFromText;
    const orderNumberMatch = text.match(/–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\s+(\d+)/);

    if (orderNumberMatch && orderNumberMatch[1]) {
      // Extracted order number
      orderNumberFromText = orderNumberMatch[1];
      console.log(`Order Number: ${orderNumberFromText}`);
    } else {
      console.log('Order number not found in the text.');
    }

    switch (action.confirm) {
      case 'confirm':
        confrimOrder({ text, chatId, userId, messageId, keyboards });
        break;
      case 'privat':
        sendPaymentMessage(chatId, action.confirm);
        break;
      case 'polish_bank':
        sendPaymentMessage(chatId, action.confirm);
        break;
      case 'blik':
        sendPaymentMessage(chatId, action.confirm);
        break;
      case 'pay-confirm':
        paymentConfirm({ text, chatId, userId, messageId, keyboards });
        break;
      case 'send-pack-number':
        sendOrderConfirmation({
          text,
          chatId,
          userId,
          messageId,
          keyboards,
          orderNumber: orderNumberFromText,
        });
        break;
    }
  });
}

// Command handlers
bot.onText(/\/echo (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const resp = match[1];
  bot.sendMessage(chatId, resp);
});

bot.onText(/\/start/, (msg) => {
  handleStartCommand(msg);
});

bot.onText(/\/restart/, (msg) => {
  handleStartCommand(msg);
});

// Start the Express server
const PORT = process.env.PORT || 8000;
app.listen(PORT, () => console.log(`Server started on PORT ${PORT}`));
