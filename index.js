const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');

dotenv.config();

// Constants
const _token = process.env.TOKEN;
const group_chat = process.env.GROUP_CHAT;
const group_chat_for_payment = process.env.GROUP_CHAT_FOR_PAYMENT;
const webAppUrl = process.env.WEB_URL;

let orderNumber = {};
let userPhoneNumber = {};
let userFirstTimeClick = {};

// Create Express app
const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// Create Telegram Bot
const bot = new TelegramBot(_token, { polling: true });
bot.on('polling_error', console.log);

// Helper function to send a message with a keyboard
function sendKeyboardMessage(chatId, text, keyboard) {
  const options = {
    parse_mode: 'Markdown',
    reply_markup: {
      one_time_keyboard: true,
      keyboard,
    },
  };
  bot.sendMessage(chatId, text, options);
}

function confrimOrder({ chatId, userId, text, messageId, keyboards }) {
  // Create a new array with the first element replaced
  const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
  updatedKeyboards[0] = [
    {
      text: '–ü—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω–æ!!!',
      callback_data: 'payment_confirmation',
    },
  ];

  const inlineKeyboard = [...updatedKeyboards];

  const paymentButtons = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ (–∫—É—Ä—Å 8.8)',
            callback_data: JSON.stringify({ confirm: 'privat', chat_id: chatId }),
          },
        ],
        [
          {
            text: '–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –ø–æ–ª—å—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫',
            callback_data: JSON.stringify({ confirm: 'polish_bank', chat_id: chatId }),
          },
        ],
      ],
    },
  };

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  });

  bot.sendMessage(
    userId,
    '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ \n \n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ',
    paymentButtons
  );
}

function sendPaymentMessage(chatId, type) {
  function checkType() {
    switch (type) {
      case 'privat':
        return '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: 5363542019838953\n–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: –î–µ–º–µ–º–µ–Ω—Ç—å—î–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è\n–ö—É—Ä—Å: 8.8\n–°—É–º–∞: —Å—É–º–∞ –≤ –∑–ª–æ—Ç–∏—Ö –ø–æ–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ 8.8';
      case 'polish_bank':
        return '–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É:\n24 1600 1462 1731 7466 5000 0001\n–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: Dementieva Anastasiia\n–ë–∞–Ω–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: PNB Paribas';
    }
  }

  bot.sendMessage(chatId, `${checkType(type)}`, {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ c–∫—Ä—ñ–Ω-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
            callback_data: JSON.stringify({ confirm: 'sendPhoto', chat_id: chatId }),
          },
        ],
      ],
    },
  });
}

function requestUserPhoto(chat_id) {
  bot.sendMessage(chat_id, '–í–∏—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏,–ø—Ä–∏–∫—Ä—ñ–ø–∏–≤—à–∏ —Ñ–æ—Ç–æ –∑–Ω–∏–∑—É üëá');
  // Listen for messages from the user
  bot.once('photo', async (msg) => {
    const chatId = msg.chat.id;

    if (msg.photo && msg.photo.length > 0) {
      // The `msg.photo` property is an array of photo sizes
      // You can access different sizes using indexes (0 - smallest, 2 - largest)
      const photo = msg.photo[msg.photo.length - 1]; // Use the largest available photo

      try {
        // Send the photo to the group chat

        await bot.sendPhoto(group_chat_for_payment, photo.file_id);
        bot.sendMessage(group_chat_for_payment, `–°–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Ññ${orderNumber[chatId]}`);
        bot.sendMessage(chatId, '–§–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ üòç\n–ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É');
        delete orderNumber[chatId];
      } catch (error) {
        console.error('Error sending photo:', error);
        bot.sendMessage(chatId, '–ü—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ üò≥\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É');
        requestUserPhoto(chatId);
      }
    } else {
      bot.sendMessage(chatId, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏');
      sendPaymentMessage(chatId, type);
    }
  });
}

function paymentConfirm({ chatId, userId, text, messageId, keyboards }) {
  // Create a new array with the first element replaced
  const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
  updatedKeyboards[1] = [
    {
      text: '–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!!!',
      callback_data: 'payment_confirmation',
    },
  ];

  const inlineKeyboard = [...updatedKeyboards];

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  });

  bot.sendMessage(userId, '–í–∞—à—É –æ–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ‚úÖ\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è üì¶');
}

function userDeclineOreder(chatId, userId, messageId) {
  bot.editMessageText('–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ!!!', {
    chat_id: chatId,
    message_id: messageId,
  });
  const inlineKeyboard = [
    [
      {
        text: '–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É',
      },
    ],
  ];

  sendKeyboardMessage(userId, '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∞–Ω–Ω—É–ª—å–æ–≤–∞–Ω–µ!', inlineKeyboard);
}

function userAcceptOrder(chatId, messageId) {
  const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
  updatedKeyboards[1] = [
    {
      text: '–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∞–∫—Ç—É–∞–ª—ñ–∑–æ–≤–∞–Ω–æ',
      callback_data: 'actualize',
    },
  ];

  const inlineKeyboard = [...updatedKeyboards];

  bot.editMessageText(text, {
    chat_id: chatId,
    message_id: messageId,
    reply_markup: {
      inline_keyboard: inlineKeyboard,
    },
  });
}

function actualizeInfo(chatId, userId) {
  const inlineKeyboard = {
    reply_markup: {
      inline_keyboard: [
        [
          {
            text: '–¢–∞–∫',
            callback_data: JSON.stringify({ confirm: 'accept', chat_id: chatId }),
          },
        ],
        [
          {
            text: '–ù—ñ',
            callback_data: JSON.stringify({ confirm: 'decline', chat_id: chatId }),
          },
        ],
      ],
    },
  };

  bot.sendMessage(userId, '–ß–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ?', inlineKeyboard);
}

function sendOrderConfirmation({ chatId, userId, text, messageId, keyboards, orderNumber }) {
  // Create a new array with the first element replaced
  const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
  updatedKeyboards[2] = [
    {
      text: '–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!!!',
      callback_data: 'payment_confirmation',
    },
  ];
  const inlineKeyboard = [...updatedKeyboards];

  bot.sendMessage(
    group_chat,
    `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—Å–∏–ª–∫–∏ ‚Ññ ${orderNumber}  —á–µ—Ä–µ–∑ SPACE: 1) —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ 2) –Ω–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏`
  );
  bot.once('message', async (msg) => {
    const textFromMsg = msg?.text;
    try {
      const messages = textFromMsg.split(' ');

      bot.sendMessage(
        userId,
        `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ ${orderNumber} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É–∂–±–æ—é ${messages[0]} ,\n –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${messages[1]}üì¶`
      );

      bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
          inline_keyboard: inlineKeyboard,
        },
      });
      console.log('done confirmation');
    } catch (err) {
      console.log(err);
    }
  });
}

// Function to handle the /start command
function handleStartCommand(msg) {
  bot.removeAllListeners();

  const chatId = msg.chat.id;

  const inlineKeyboard = [
    [
      {
        text: '–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É',
      },
    ],
  ];

  const startMessage =
    '–í–∞—Å –≤—ñ—Ç–∞—î —á–∞—Ç-–±–æ—Ç Snakicz üêü\n–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è, –±—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è —Å–≤–æ—ó–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É üëáüèª\n–í–∏ —Ç–∞–∫–æ–∂ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è —É –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ [—Ç–µ–ª–µ–≥—Ä–∞–º](https://t.me/snakicz_manager) –∞–±–æ [—ñ–Ω—Å—Ç–∞–≥—Ä–∞–º](https://www.instagram.com/snakicz/)';
  const contactKeyboard = [[{ text: '–ú—ñ–π —Ç–µ–ª–µ—Ñ–æ–Ω', request_contact: true }], ['–í–∏–π—Ç–∏']];

  sendKeyboardMessage(chatId, startMessage, contactKeyboard);

  function contactHandler(msg) {
    const chatId = msg.chat.id;
    // Generate a random number between 1000 and 9999
    const randomPart = Math.floor(Math.random() * 9000) + 1000;

    userPhoneNumber[chatId] = msg.contact.phone_number;
    // Combine chatId and the random number to create the order number
    orderNumber[chatId] = `${chatId}${randomPart}`;

    const url = !userFirstTimeClick[chatId] ? webAppUrl + '/priceSelect' : webAppUrl;

    const storeKeyboard = [[{ text: '–ú–∞–≥–∞–∑–∏–Ω', web_app: { url } }]];
    const thankYouMessage = "–î—è–∫—É—î–º–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∏. –î–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ú–∞–≥–∞–∑–∏–Ω'";
    sendKeyboardMessage(chatId, thankYouMessage, storeKeyboard);
  }

  function webDataHandler(msg) {
    if (msg.web_app_data?.data) {
      const chatId = msg.chat.id;
      const user = msg.chat.username;

      const option = {
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø—ñ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—è',
                callback_data: JSON.stringify({ confirm: 'confirm', chat_id: chatId }),
              },
            ],
            [
              {
                text: '–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –æ–ø–ª–∞—Ç—É',
                callback_data: JSON.stringify({ confirm: 'pay-confirm', chat_id: chatId }),
              },
            ],
            [
              {
                text: '–í–∏—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä –ø–∞—á–∫–∏',
                callback_data: JSON.stringify({ confirm: 'send-pack-number', chat_id: chatId }),
              },
            ],
            [
              {
                text: '–ê–∫—Ç—É–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞',
                callback_data: JSON.stringify({ confirm: 'actualize', chat_id: chatId }),
              },
            ],
          ],
        },
      };

      sendKeyboardMessage(chatId, '–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ', inlineKeyboard);

      try {
        const dataFromResponse = JSON.parse(msg.web_app_data.data);
        const { data, products, totalPrice, totalWeight, freeDelivery, isCatExist, activePrice } =
          dataFromResponse;
        const calcTotalPrice =
          !freeDelivery && activePrice === 'z≈Ç' ? +totalPrice + 17 : totalPrice;
        // Functions to format messages
        function formatProduct(count, title, weight) {
          return `–Ω–∞–∑–≤–∞: ${title} –≤–∞–≥–∞: ${weight} –∫—ñ–ª—å–∫—ñ—Å—Ç—å: ${count},\n`;
        }

        async function sendProducts() {
          const prodMessage = `
        –Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ: ${data?.userName} ${data?.userLastName}
        –ê–¥—Ä–µ—Å–∞-–ü–∞—á–∫–æ–º–∞—Ç—É: ${data?.addressPack || '–Ω–µ–º–∞'},
        –ê–¥—Ä–µ—Å–∞-–ø–æ–∫—É–ø—Ü—è: ${data?.userAddress || '–Ω–µ–º–∞'},
        –ú—ñ—Å—Ç–æ: ${data?.userCity},
        –Ü–Ω–¥–µ–∫—Å: ${data?.userIndexCity}
        –ù—ñ–∫: @${user},
        –Ñ –∫–æ—Ç–∏–∫: ${isCatExist ? '–Ñ –∫–æ—Ç–∏–∫' : '–ù–µ–º–∞ –∫–æ—Ç–∏–∫–∞'} 
        –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderNumber[chatId]}
        –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞: ${freeDelivery ? '–Ñ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞' : '–ù–µ–º–∞'}
        C—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${calcTotalPrice} ${activePrice},
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: ${data?.phoneNumber},
        –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—É: ${userPhoneNumber[chatId]}
        –ï–º–µ–π–ª: ${data?.email},
        –í–∞–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalWeight},
        –ü–æ–∑–∏—Ü—ñ—ó: \n\n${products
          .map((item) => formatProduct(item.count, item.title, item.weight))
          .join('\n\n')}`;

          await bot.sendMessage(group_chat, prodMessage, option);
        }

        async function sendMessages() {
          const messagesToSend = [
            `–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞: ${data?.userAddress || data?.addressPack}`,
            `C—É–º–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${calcTotalPrice} ${activePrice}`,
            `–í–∞–≥–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${totalWeight} –≥—Ä–∞–º`,
          ];

          for (const message of messagesToSend) {
            await bot.sendMessage(chatId, message);
          }

          setTimeout(async () => {
            await bot.sendMessage(
              chatId,
              '–î—è–∫—É—î–º–æ –∑–∞ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚ù§Ô∏è\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —ñ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É\n–Ø–∫—â–æ —É –≤–∞—Å –≤–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è - –í–∏ –º–æ–∂–µ—Ç–µ –∑–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –Ω–∞—à–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É —Ç–µ–ª–µ–≥—Ä–∞–º (https://t.me/snakicz_manager) –∞–±–æ (https://www.instagram.com/snakicz/)'
            );
          }, 2000);
        }

        sendMessages();
        sendProducts();

        delete userPhoneNumber[chatId];
        userFirstTimeClick[chatId] = true;
      } catch (e) {
        console.error('Error parsing data:', e);
      }
    }
  }

  bot.once('contact', contactHandler);

  bot.on('web_app_data', webDataHandler);

  bot.on('callback_query', function onCallbackQuery(callbackQuery) {
    const action = JSON.parse(callbackQuery.data);
    const text = callbackQuery.message.text;
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const keyboards = callbackQuery.message.reply_markup.inline_keyboard;
    const userId = action?.chat_id;
    let orderNumberFromText;
    const orderNumberMatch = text.match(/–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\s+(\d+)/);

    if (orderNumberMatch && orderNumberMatch[1]) {
      // Extracted order number
      orderNumberFromText = orderNumberMatch[1];
      console.log(`Order Number: ${orderNumberFromText}`);
    } else {
      console.log('Order number not found in the text.');
    }

    switch (action.confirm) {
      case 'confirm':
        confrimOrder({ text, chatId, userId, messageId, keyboards });
        break;
      case 'privat':
        sendPaymentMessage(chatId, action.confirm);
        break;
      case 'polish_bank':
        sendPaymentMessage(chatId, action.confirm);
        break;
      case 'pay-confirm':
        paymentConfirm({ text, chatId, userId, messageId, keyboards });
        break;
      case 'send-pack-number':
        sendOrderConfirmation({
          text,
          chatId,
          userId,
          messageId,
          keyboards,
          orderNumber: orderNumberFromText,
        });
        break;
      case 'sendPhoto':
        requestUserPhoto(chatId);
        break;
      case 'actualize':
        actualizeInfo(chatId, userId);
        break;
      case 'accept':
        userAcceptOrder(userId, messageId);
        break;
      case 'decline':
        userDeclineOreder(userId, chatId, messageId);
        break;
    }
  });
}

// Command handlers
bot.onText(/\/echo (.+)/, (msg, match) => {
  const chatId = msg.chat.id;
  const resp = match[1];
  bot.sendMessage(chatId, resp);
});

bot.onText(/\/start/, (msg) => {
  handleStartCommand(msg);
});

bot.onText(/\–ü–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É/, (msg) => {
  handleStartCommand(msg);
});

bot.onText(/\–í–∏–π—Ç–∏/, (msg) => {
  handleStartCommand(msg);
});

bot.onText(/\/restart/, (msg) => {
  handleStartCommand(msg);
});

// Start the Express server
const PORT = process.env.PORT || 8000;
app.listen(PORT, () => console.log(`Server started on PORT ${PORT}`));
