// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")

}


model User {
  id             Int      @id @default(autoincrement())
  uniqueId       String @unique
  phoneNumber    String
  isFirstTimeBuy Boolean      @default(true)
  ordersCount    Int @default(0)


  //conditional password
  password String @default("")
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  order Order[]
}

model Order {
  id                Int       @id @default(autoincrement())
  userName          String    // Им'я та Прізвище
  userLastName      String    // Им'я та Прізвище
  userCountry       String    // країна
  addressPack       String   // Адреса-Пачкомату
  userAddress       String   // Адреса-покупця
  userCity          String   // Місто
  userIndexCity     String   // Індекс
  userNickname      String    // Нік
  isCatExist        Boolean   // Є котик
  orderNumber       String  @unique  // Номер замовлення
  freeDelivery      Boolean   // Безкоштовна доставка
  totalPrice        Float     // Сума замовлення
  activePrice       String    // Активна валюта
  phoneNumber       String   // Номер телефону для відправки
  contactPhoneNumber String // Номер телефону для контакту
  email             String   // Емейл
  totalWeight       Float     // Вага замовлення
  orderItems        Json      // JSON array of order items
  isStatisted       Boolean     @default(false)
  price             Float

  paymentConfirmPicUrl String   @default("")
  catExistConfirmPicUrl String   @default("")
  specialOcasionAudioUrl String @default("")



  op_isConfirmationOrderSended Boolean @default(false)
  op_isConfirmationPaymentSended Boolean @default(false)
  op_isPacNumberSended Boolean @default(false)
  op_isActualize Boolean @default(false)


  orderComeFrom     String  @default("telegram")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt



   // Define the opposite relation field
  uniqueId String
  user    User @relation(fields: [uniqueId], references: [uniqueId])
}

model Product {
  id Int     @id @default(autoincrement()) 
  title String
  price Json
  img String
  weight Int[] 
  description String?
  isEnable Boolean @default(true)
  category Int
  totalWeightProduct Int
  totalProductWeightFromProducts Json?
}
