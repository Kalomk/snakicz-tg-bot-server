"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SM_onCallbackQuery = exports.SM_sendOrderConfirmation = exports.SM_actualizeInfo = exports.SM_userAcceptOrder = exports.SM_userDeclineOrder = exports.SM_paymentConfirm = exports.SM_requestUserPhoto = exports.SM_sendPaymentMessage = exports.SM_confrimOrder = void 0;
const __1 = require("..");
function SM_confrimOrder({ bot, chatId, userId, text, messageId, keyboards, }) {
    // Create a new array with the first element replaced
    const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
    updatedKeyboards[0] = [
        {
            text: '–ü—ñ–¥—Ç–≤–µ—Ä–∂–µ–Ω–Ω–æ!!!',
            callback_data: 'payment_confirmation',
        },
    ];
    const inlineKeyboard = [...updatedKeyboards];
    const paymentButtons = {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ü—Ä–∏–≤–∞—Ç–ë–∞–Ω–∫ (–∫—É—Ä—Å 8.8)',
                        callback_data: JSON.stringify({ confirm: 'privat', chat_id: chatId }),
                    },
                ],
                [
                    {
                        text: '–ü–µ—Ä–µ–∫–∞–∑ –Ω–∞ –ø–æ–ª—å—Å—å–∫–∏–π —Ä–∞—Ö—É–Ω–æ–∫',
                        callback_data: JSON.stringify({ confirm: 'polish_bank', chat_id: chatId }),
                    },
                ],
            ],
        },
    };
    bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: inlineKeyboard,
        },
    });
    bot.sendMessage(userId, '–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ ‚úÖ \n \n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –∑—Ä—É—á–Ω–∏–π –¥–ª—è –í–∞—Å —Å–ø–æ—Å—ñ–± –æ–ø–ª–∞—Ç–∏: ', paymentButtons);
}
exports.SM_confrimOrder = SM_confrimOrder;
function SM_sendPaymentMessage(bot, chatId, type) {
    function checkType(type) {
        switch (type) {
            case 'privat':
                return '–ù–æ–º–µ—Ä –∫–∞—Ä—Ç–∫–∏: 5363542019838953\n–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: –î–µ–º–µ–º–µ–Ω—Ç—å—î–≤–∞ –ê–Ω–∞—Å—Ç–∞—Å—ñ—è\n–ö—É—Ä—Å: 8.8\n–°—É–º–∞: —Å—É–º–∞ –≤ –∑–ª–æ—Ç–∏—Ö –ø–æ–º–Ω–æ–∂–µ–Ω–∞ –Ω–∞ 8.8';
            case 'polish_bank':
                return '–ù–æ–º–µ—Ä —Ä–∞—Ö—É–Ω–∫—É:\n24 1600 1462 1731 7466 5000 0001\n–ü–Ü–ë –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: Dementieva Anastasiia\n–ë–∞–Ω–∫ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞: PNB Paribas';
        }
    }
    bot.sendMessage(chatId, `${checkType(type)}`, {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–ù–∞–¥—ñ—Å–ª–∞—Ç–∏ c–∫—Ä—ñ–Ω-–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è',
                        callback_data: JSON.stringify({ confirm: 'sendPhoto', chat_id: chatId }),
                    },
                ],
            ],
        },
    });
}
exports.SM_sendPaymentMessage = SM_sendPaymentMessage;
function SM_requestUserPhoto(bot, chat_id, orderNumber) {
    bot.sendMessage(chat_id, '–í–∏—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏,–ø—Ä–∏–∫—Ä—ñ–ø–∏–≤—à–∏ —Ñ–æ—Ç–æ –∑–Ω–∏–∑—É üëá');
    // Listen for messages from the user
    bot.once('photo', async (msg) => {
        const chatId = msg.chat.id;
        if (msg.photo && msg.photo.length > 0) {
            // The `msg.photo` property is an array of photo sizes
            // You can access different sizes using indexes (0 - smallest, 2 - largest)
            const photo = msg.photo[msg.photo.length - 1]; // Use the largest available photo
            try {
                // Send the photo to the group chat
                await bot.sendPhoto(__1.group_chat_for_payment, photo.file_id);
                bot.sendMessage(__1.group_chat_for_payment, `–°–∫—Ä—ñ–Ω –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ‚Ññ${orderNumber[chatId]}`);
                bot.sendMessage(chatId, '–§–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ üòç\n–ß–µ–∫–∞–π—Ç–µ –Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫—É');
                delete orderNumber[chatId];
            }
            catch (error) {
                console.error('Error sending photo:', error);
                bot.sendMessage(chatId, '–ü—ñ–¥ —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ üò≥\n–°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É');
                SM_requestUserPhoto(bot, chatId, orderNumber);
            }
        }
        else {
            bot.sendMessage(chatId, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å —Ñ–æ—Ç–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏');
            SM_requestUserPhoto(bot, chatId, orderNumber);
        }
    });
}
exports.SM_requestUserPhoto = SM_requestUserPhoto;
function SM_paymentConfirm({ bot, chatId, userId, text, messageId, keyboards, }) {
    // Create a new array with the first element replaced
    const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
    updatedKeyboards[1] = [
        {
            text: '–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!!!',
            callback_data: 'payment_confirmation',
        },
    ];
    const inlineKeyboard = [...updatedKeyboards];
    bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: inlineKeyboard,
        },
    });
    bot.sendMessage(userId, '–í–∞—à—É –æ–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ‚úÖ\n–ë—É–¥—å –ª–∞—Å–∫–∞, –æ—á—ñ–∫—É–π—Ç–µ –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è üì¶');
}
exports.SM_paymentConfirm = SM_paymentConfirm;
function SM_userDeclineOrder(bot, chatId, userId, messageId, orderNumberFromText) {
    bot.editMessageText('–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –∞–Ω–Ω—É–ª—å–æ–≤–∞–Ω–µ!', {
        chat_id: chatId,
        message_id: messageId,
    });
    bot.sendMessage(userId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumberFromText} –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ`);
}
exports.SM_userDeclineOrder = SM_userDeclineOrder;
function SM_userAcceptOrder(bot, userId, orderNumberFromText) {
    bot.sendMessage(userId, `–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è ${orderNumberFromText} –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ`);
}
exports.SM_userAcceptOrder = SM_userAcceptOrder;
function SM_actualizeInfo({ bot, chatId, keyboards, userId, messageId, text, orderNumberFromText, }) {
    const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
    updatedKeyboards[3] = [
        {
            text: '–ó–∞–ø–∏—Ç –≤–∏—Å–ª–∞–Ω–æ (–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∑–Ω–æ–≤—É —â–æ–± –≤–∏—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –∑–Ω–æ–≤—É)',
            callback_data: 'actualize',
        },
    ];
    const inlineKeyboard = [...updatedKeyboards];
    bot.editMessageText(text, {
        chat_id: chatId,
        message_id: messageId,
        reply_markup: {
            inline_keyboard: inlineKeyboard,
        },
    });
    const inlineKeyboardUser = {
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: '–¢–∞–∫',
                        callback_data: JSON.stringify({ confirm: 'accept', chat_id: chatId }),
                    },
                ],
                [
                    {
                        text: '–ù—ñ',
                        callback_data: JSON.stringify({ confirm: 'decline', chat_id: chatId }),
                    },
                ],
            ],
        },
    };
    bot.sendMessage(userId, `–ß–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ( –ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è: ${orderNumberFromText} ) —â–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ?`, inlineKeyboardUser);
}
exports.SM_actualizeInfo = SM_actualizeInfo;
function SM_sendOrderConfirmation({ bot, chatId, keyboards, userId, messageId, text, orderNumberFromText, }) {
    // Create a new array with the first element replaced
    const updatedKeyboards = keyboards.slice(); // Create a copy of the original array
    updatedKeyboards[2] = [
        {
            text: '–û–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!!!',
            callback_data: 'payment_confirmation',
        },
    ];
    const inlineKeyboard = [...updatedKeyboards];
    bot.sendMessage(__1.group_chat, `–ù–∞–¥—ñ—à–ª—ñ—Ç—å —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—Å–∏–ª–∫–∏ ‚Ññ ${orderNumberFromText}  —á–µ—Ä–µ–∑ SPACE: 1) —Å–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ 2) –Ω–æ–º–µ—Ä –ø–æ—Å–∏–ª–∫–∏`);
    bot.once('message', async (msg) => {
        const textFromMsg = msg?.text;
        try {
            const messages = textFromMsg.split(' ');
            bot.sendMessage(userId, `–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è ‚Ññ ${orderNumberFromText} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É–∂–±–æ—é ${messages[0]} ,\n –Ω–æ–º–µ—Ä –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è ${messages[1]}üì¶`);
            bot.editMessageText(text, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: {
                    inline_keyboard: inlineKeyboard,
                },
            });
            console.log('done confirmation');
        }
        catch (err) {
            console.log(err);
        }
    });
}
exports.SM_sendOrderConfirmation = SM_sendOrderConfirmation;
function SM_onCallbackQuery(bot, callbackQuery, orderNumber) {
    const action = JSON.parse(callbackQuery.data);
    const text = callbackQuery?.message?.text;
    const chatId = callbackQuery?.message?.chat.id;
    const messageId = callbackQuery?.message?.message_id;
    const keyboards = callbackQuery?.message?.reply_markup?.inline_keyboard;
    const userId = action?.chat_id;
    let orderNumberFromText;
    const orderNumberMatch = text?.match(/–ù–æ–º–µ—Ä –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\s+(\d+)/);
    if (orderNumberMatch && orderNumberMatch[1]) {
        // Extracted order number
        orderNumberFromText = orderNumberMatch[1];
        console.log(`Order Number: ${orderNumberFromText}`);
    }
    else {
        console.log('Order number not found in the text.');
    }
    switch (action.confirm) {
        case 'confirm':
            SM_confrimOrder({ bot, text, chatId, userId, messageId, keyboards });
            break;
        case 'privat':
            SM_sendPaymentMessage(bot, chatId, action.confirm);
            break;
        case 'polish_bank':
            SM_sendPaymentMessage(bot, chatId, action.confirm);
            break;
        case 'pay-confirm':
            SM_paymentConfirm({ bot, text, chatId, userId, messageId, keyboards });
            break;
        case 'send-pack-number':
            SM_sendOrderConfirmation({
                bot,
                text,
                chatId,
                userId,
                messageId,
                keyboards,
                orderNumberFromText: orderNumberFromText,
            });
            break;
        case 'sendPhoto':
            SM_requestUserPhoto(bot, chatId, orderNumber);
            break;
        case 'actualize':
            SM_actualizeInfo({
                bot,
                text,
                chatId,
                keyboards,
                userId,
                messageId,
                orderNumberFromText: orderNumberFromText,
            });
            break;
        case 'accept':
            SM_userAcceptOrder(bot, userId, orderNumberFromText);
            break;
        case 'decline':
            SM_userDeclineOrder(bot, chatId, userId, messageId, orderNumberFromText);
            break;
    }
}
exports.SM_onCallbackQuery = SM_onCallbackQuery;
//# sourceMappingURL=sendingMesagesFuncs.js.map